//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.1.1
//     from Assets/Artemis/Rituals/Scripts/InputMap/SorcererInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Perell.Artemis.Example.Rituals.Controls
{
    public partial class @SorcererInputs : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @SorcererInputs()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""SorcererInputs"",
    ""maps"": [
        {
            ""name"": ""General"",
            ""id"": ""2ad33000-1590-4732-8330-aedad3979c8a"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""d4e1ee28-5e60-4a0c-ad55-857b88ce9023"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Facing"",
                    ""type"": ""Value"",
                    ""id"": ""186318c5-3049-4b66-b913-b7e61256ae68"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector WASD"",
                    ""id"": ""7147069a-101e-4c49-9856-43f37161d639"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9913841d-fcee-402c-b905-a94c17496c41"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c520b15c-4505-4775-bf71-7c63d4aaeda6"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""562753e7-0436-4698-8e88-d47b297193fc"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""04266b7f-fc08-42bb-8666-08ed6de4e496"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector Arrows"",
                    ""id"": ""958ded44-3834-4e1b-a493-0f2561176ed7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""bb9c8abd-535c-4577-8c28-6cf5c918e984"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""dfc3389d-c688-44a4-9056-453bd6e9396f"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""acc866d1-98b9-463f-8690-3ad116d97f1f"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""848c74b0-190d-4376-938d-90b12f4f30d2"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e7dfb0dc-bfb0-44cc-9de0-10962dbf1196"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Facing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Dungeon"",
            ""id"": ""fe38a74e-148d-4cad-aefd-bb38406cd759"",
            ""actions"": [
                {
                    ""name"": ""PrimaryAbility"",
                    ""type"": ""Button"",
                    ""id"": ""02b544cd-3fd8-4065-8d60-0cd745e68476"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryAbility"",
                    ""type"": ""Button"",
                    ""id"": ""952bda75-7441-4fd6-adbf-be959bcfa643"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scroll"",
                    ""type"": ""Value"",
                    ""id"": ""2975e324-0894-4f98-9f6f-db9aae30b605"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Reordering"",
                    ""type"": ""Button"",
                    ""id"": ""f5b74bee-4e83-48a0-aed8-fac23c70bc2f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DEBUG ESCAPE"",
                    ""type"": ""Button"",
                    ""id"": ""153d2752-3349-4f67-8d01-bc1d9b7be640"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ec9fcb26-300d-4d7a-97b6-7e82d39aadd7"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b5a1276e-6818-43c0-929d-fc81cf5b4dca"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5baeacfc-a4f8-4de8-9e69-150cf43aa1a0"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b9a6a933-90d3-4a55-a6e6-aa04f87f35e0"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ef890c6b-1610-4520-9d8c-b72620a36c69"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c9ea691f-cbdc-4c44-8511-fa1754fc863d"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reordering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f5f43fcb-0a57-4c83-90e9-e077cfa8e189"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DEBUG ESCAPE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Narrative"",
            ""id"": ""0aaedebd-5fa0-492d-bb27-f9a2ff2d7f11"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""dbb3b6d6-7203-40f2-9cda-485ed454735a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cf1ea44b-186e-4ab1-a51c-c5e2752e9722"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // General
            m_General = asset.FindActionMap("General", throwIfNotFound: true);
            m_General_Movement = m_General.FindAction("Movement", throwIfNotFound: true);
            m_General_Facing = m_General.FindAction("Facing", throwIfNotFound: true);
            // Dungeon
            m_Dungeon = asset.FindActionMap("Dungeon", throwIfNotFound: true);
            m_Dungeon_PrimaryAbility = m_Dungeon.FindAction("PrimaryAbility", throwIfNotFound: true);
            m_Dungeon_SecondaryAbility = m_Dungeon.FindAction("SecondaryAbility", throwIfNotFound: true);
            m_Dungeon_Scroll = m_Dungeon.FindAction("Scroll", throwIfNotFound: true);
            m_Dungeon_Reordering = m_Dungeon.FindAction("Reordering", throwIfNotFound: true);
            m_Dungeon_DEBUGESCAPE = m_Dungeon.FindAction("DEBUG ESCAPE", throwIfNotFound: true);
            // Narrative
            m_Narrative = asset.FindActionMap("Narrative", throwIfNotFound: true);
            m_Narrative_Interact = m_Narrative.FindAction("Interact", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // General
        private readonly InputActionMap m_General;
        private IGeneralActions m_GeneralActionsCallbackInterface;
        private readonly InputAction m_General_Movement;
        private readonly InputAction m_General_Facing;
        public struct GeneralActions
        {
            private @SorcererInputs m_Wrapper;
            public GeneralActions(@SorcererInputs wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_General_Movement;
            public InputAction @Facing => m_Wrapper.m_General_Facing;
            public InputActionMap Get() { return m_Wrapper.m_General; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GeneralActions set) { return set.Get(); }
            public void SetCallbacks(IGeneralActions instance)
            {
                if (m_Wrapper.m_GeneralActionsCallbackInterface != null)
                {
                    @Movement.started -= m_Wrapper.m_GeneralActionsCallbackInterface.OnMovement;
                    @Movement.performed -= m_Wrapper.m_GeneralActionsCallbackInterface.OnMovement;
                    @Movement.canceled -= m_Wrapper.m_GeneralActionsCallbackInterface.OnMovement;
                    @Facing.started -= m_Wrapper.m_GeneralActionsCallbackInterface.OnFacing;
                    @Facing.performed -= m_Wrapper.m_GeneralActionsCallbackInterface.OnFacing;
                    @Facing.canceled -= m_Wrapper.m_GeneralActionsCallbackInterface.OnFacing;
                }
                m_Wrapper.m_GeneralActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Movement.started += instance.OnMovement;
                    @Movement.performed += instance.OnMovement;
                    @Movement.canceled += instance.OnMovement;
                    @Facing.started += instance.OnFacing;
                    @Facing.performed += instance.OnFacing;
                    @Facing.canceled += instance.OnFacing;
                }
            }
        }
        public GeneralActions @General => new GeneralActions(this);

        // Dungeon
        private readonly InputActionMap m_Dungeon;
        private IDungeonActions m_DungeonActionsCallbackInterface;
        private readonly InputAction m_Dungeon_PrimaryAbility;
        private readonly InputAction m_Dungeon_SecondaryAbility;
        private readonly InputAction m_Dungeon_Scroll;
        private readonly InputAction m_Dungeon_Reordering;
        private readonly InputAction m_Dungeon_DEBUGESCAPE;
        public struct DungeonActions
        {
            private @SorcererInputs m_Wrapper;
            public DungeonActions(@SorcererInputs wrapper) { m_Wrapper = wrapper; }
            public InputAction @PrimaryAbility => m_Wrapper.m_Dungeon_PrimaryAbility;
            public InputAction @SecondaryAbility => m_Wrapper.m_Dungeon_SecondaryAbility;
            public InputAction @Scroll => m_Wrapper.m_Dungeon_Scroll;
            public InputAction @Reordering => m_Wrapper.m_Dungeon_Reordering;
            public InputAction @DEBUGESCAPE => m_Wrapper.m_Dungeon_DEBUGESCAPE;
            public InputActionMap Get() { return m_Wrapper.m_Dungeon; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(DungeonActions set) { return set.Get(); }
            public void SetCallbacks(IDungeonActions instance)
            {
                if (m_Wrapper.m_DungeonActionsCallbackInterface != null)
                {
                    @PrimaryAbility.started -= m_Wrapper.m_DungeonActionsCallbackInterface.OnPrimaryAbility;
                    @PrimaryAbility.performed -= m_Wrapper.m_DungeonActionsCallbackInterface.OnPrimaryAbility;
                    @PrimaryAbility.canceled -= m_Wrapper.m_DungeonActionsCallbackInterface.OnPrimaryAbility;
                    @SecondaryAbility.started -= m_Wrapper.m_DungeonActionsCallbackInterface.OnSecondaryAbility;
                    @SecondaryAbility.performed -= m_Wrapper.m_DungeonActionsCallbackInterface.OnSecondaryAbility;
                    @SecondaryAbility.canceled -= m_Wrapper.m_DungeonActionsCallbackInterface.OnSecondaryAbility;
                    @Scroll.started -= m_Wrapper.m_DungeonActionsCallbackInterface.OnScroll;
                    @Scroll.performed -= m_Wrapper.m_DungeonActionsCallbackInterface.OnScroll;
                    @Scroll.canceled -= m_Wrapper.m_DungeonActionsCallbackInterface.OnScroll;
                    @Reordering.started -= m_Wrapper.m_DungeonActionsCallbackInterface.OnReordering;
                    @Reordering.performed -= m_Wrapper.m_DungeonActionsCallbackInterface.OnReordering;
                    @Reordering.canceled -= m_Wrapper.m_DungeonActionsCallbackInterface.OnReordering;
                    @DEBUGESCAPE.started -= m_Wrapper.m_DungeonActionsCallbackInterface.OnDEBUGESCAPE;
                    @DEBUGESCAPE.performed -= m_Wrapper.m_DungeonActionsCallbackInterface.OnDEBUGESCAPE;
                    @DEBUGESCAPE.canceled -= m_Wrapper.m_DungeonActionsCallbackInterface.OnDEBUGESCAPE;
                }
                m_Wrapper.m_DungeonActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @PrimaryAbility.started += instance.OnPrimaryAbility;
                    @PrimaryAbility.performed += instance.OnPrimaryAbility;
                    @PrimaryAbility.canceled += instance.OnPrimaryAbility;
                    @SecondaryAbility.started += instance.OnSecondaryAbility;
                    @SecondaryAbility.performed += instance.OnSecondaryAbility;
                    @SecondaryAbility.canceled += instance.OnSecondaryAbility;
                    @Scroll.started += instance.OnScroll;
                    @Scroll.performed += instance.OnScroll;
                    @Scroll.canceled += instance.OnScroll;
                    @Reordering.started += instance.OnReordering;
                    @Reordering.performed += instance.OnReordering;
                    @Reordering.canceled += instance.OnReordering;
                    @DEBUGESCAPE.started += instance.OnDEBUGESCAPE;
                    @DEBUGESCAPE.performed += instance.OnDEBUGESCAPE;
                    @DEBUGESCAPE.canceled += instance.OnDEBUGESCAPE;
                }
            }
        }
        public DungeonActions @Dungeon => new DungeonActions(this);

        // Narrative
        private readonly InputActionMap m_Narrative;
        private INarrativeActions m_NarrativeActionsCallbackInterface;
        private readonly InputAction m_Narrative_Interact;
        public struct NarrativeActions
        {
            private @SorcererInputs m_Wrapper;
            public NarrativeActions(@SorcererInputs wrapper) { m_Wrapper = wrapper; }
            public InputAction @Interact => m_Wrapper.m_Narrative_Interact;
            public InputActionMap Get() { return m_Wrapper.m_Narrative; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(NarrativeActions set) { return set.Get(); }
            public void SetCallbacks(INarrativeActions instance)
            {
                if (m_Wrapper.m_NarrativeActionsCallbackInterface != null)
                {
                    @Interact.started -= m_Wrapper.m_NarrativeActionsCallbackInterface.OnInteract;
                    @Interact.performed -= m_Wrapper.m_NarrativeActionsCallbackInterface.OnInteract;
                    @Interact.canceled -= m_Wrapper.m_NarrativeActionsCallbackInterface.OnInteract;
                }
                m_Wrapper.m_NarrativeActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Interact.started += instance.OnInteract;
                    @Interact.performed += instance.OnInteract;
                    @Interact.canceled += instance.OnInteract;
                }
            }
        }
        public NarrativeActions @Narrative => new NarrativeActions(this);
        public interface IGeneralActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnFacing(InputAction.CallbackContext context);
        }
        public interface IDungeonActions
        {
            void OnPrimaryAbility(InputAction.CallbackContext context);
            void OnSecondaryAbility(InputAction.CallbackContext context);
            void OnScroll(InputAction.CallbackContext context);
            void OnReordering(InputAction.CallbackContext context);
            void OnDEBUGESCAPE(InputAction.CallbackContext context);
        }
        public interface INarrativeActions
        {
            void OnInteract(InputAction.CallbackContext context);
        }
    }
}
